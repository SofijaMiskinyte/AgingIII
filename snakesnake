configfile: "config.yaml"

samples = config["samples"]
input_dir = config["input_dir"]
genome_index = config["genome_index"]
gtf_annotation = config["gtf_annotation"]
threads = config["threads"]

rule all:
    input:
        expand("results/fastqc/{sample}_1_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_2_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_1_val_1_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_2_val_2_fastqc.html", sample=samples),
        expand("results/trim_galore/{sample}_1_val_1.fq.gz", sample=samples),
        expand("results/trim_galore/{sample}_2_val_2.fq.gz", sample=samples),
        expand("results/hisat2/{sample}.sorted.bam", sample=samples),
        expand("results/hisat2/{sample}.sorted.bam.bai", sample=samples),
        expand("results/hisat2/{sample}.namesorted.bam", sample=samples),
        "results/multiqc/multiqc_report.html",
        "results/counts/count_matrix.txt"

rule fastqc_raw:
    input:
        lambda wildcards: [
            f"{input_dir}/{samples[wildcards.sample]['r1']}",
            f"{input_dir}/{samples[wildcards.sample]['r2']}"
        ]
    output:
        html1 = "results/fastqc/{sample}_1_fastqc.html",
        zip1  = "results/fastqc/{sample}_1_fastqc.zip",
        html2 = "results/fastqc/{sample}_2_fastqc.html",
        zip2  = "results/fastqc/{sample}_2_fastqc.zip"
    log:
        "logs/fastqc_raw/{sample}.log"    
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
        fastqc {input} --outdir results/fastqc &> {log}
        """

rule trim_galore:
    input:
        r1=lambda wildcards: f"{input_dir}/{samples[wildcards.sample]['r1']}",
        r2=lambda wildcards: f"{input_dir}/{samples[wildcards.sample]['r2']}",
    output:
        r1_trimmed="results/trim_galore/{sample}_1_val_1.fq.gz",
        r2_trimmed="results/trim_galore/{sample}_2_val_2.fq.gz"
    log:
        "logs/trim_galore/{sample}.log"    
    conda: "envs/preprocess_rnaseq.yaml"
    threads: 8
    shell:
        """
        trim_galore --paired {input.r1} {input.r2} -o results/trim_galore &> {log}
        """


rule fastqc_trimmed:
    input:
        r1="results/trim_galore/{sample}_1_val_1.fq.gz",
        r2="results/trim_galore/{sample}_2_val_2.fq.gz"
    output:
        html1 = "results/fastqc/{sample}_1_val_1_fastqc.html",
        zip1  = "results/fastqc/{sample}_1_val_1_fastqc.zip",
        html2 = "results/fastqc/{sample}_2_val_2_fastqc.html",
        zip2  = "results/fastqc/{sample}_2_val_2_fastqc.zip"
    log:
        "logs/fastqc_trimmed/{sample}.log"    
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
        fastqc {input.r1} {input.r2} --outdir results/fastqc &> {log}
        """

rule hisat2:
    input:
        r1_trimmed="results/trim_galore/{sample}_1_val_1.fq.gz",
        r2_trimmed="results/trim_galore/{sample}_2_val_2.fq.gz"
    output:
        bam="results/hisat2/{sample}.sorted.bam",
        bai="results/hisat2/{sample}.sorted.bam.bai"
    log:
        "logs/hisat2/{sample}.log"    
    params:
        index=genome_index
    threads: 8
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
        hisat2 -p {threads} -x {params.index} -1 {input.r1_trimmed} -2 {input.r2_trimmed} | \
        samtools view -bS - | \
        samtools sort -@ {threads} -o {output.bam} - &> {log}
        samtools index {output.bam}
        """
rule sort_bam_by_name:
    input:
        "results/hisat2/{sample}.sorted.bam"
    output:
        "results/hisat2/{sample}.namesorted.bam"
    log:
        "logs/sort_bam/{sample}.log"
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
        samtools sort -n -o {output} {input} &> {log}
        """
rule featurecounts:
    input:
        bams = expand("results/hisat2/{sample}.namesorted.bam", sample=samples)
    output:
        "results/counts/count_matrix.txt"
    log:
        "logs/featurecounts/count_matrix.log"    
    params:
        gtf=gtf_annotation
    conda:
        "envs/preprocess_rnaseq.yaml"
    threads: 8
    shell:
        """
        featureCounts -T {threads} -p -B -C -a {params.gtf} -o {output} {input} &> {log}
        """

rule multiqc:
    input:
        expand("results/fastqc/{sample}_1_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_2_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_1_val_1_fastqc.html", sample=samples),
        expand("results/fastqc/{sample}_2_val_2_fastqc.html", sample=samples),
        expand("results/trim_galore/{sample}_1_val_1.fq.gz", sample=samples),
        expand("results/trim_galore/{sample}_2_val_2.fq.gz", sample=samples),
        expand("results/hisat2/{sample}.sorted.bam", sample=samples)
    output:
        "results/multiqc/multiqc_report.html"
    log:
        "logs/multiqc/multiqc.log"    
    conda:
        "envs/preprocess_rnaseq.yaml"
    shell:
        """
        multiqc results/ -o results/multiqc &> {log}
        """

